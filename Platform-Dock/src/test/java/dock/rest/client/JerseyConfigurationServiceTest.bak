/*
 * Licensed to Sensos Ltd.
 */
package dock.rest.client;

import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.Response;
import org.junit.*;
import static org.junit.Assert.*;

/**
 * Simulates the device configuration.
 *
 * @author sensos
 */
public class JerseyConfigurationServiceTest {

    protected static final Client client = ClientBuilder.newClient();

    public JerseyConfigurationServiceTest() {
    }

    @BeforeClass
    public static void setUpClass() throws Exception {
    }

    @AfterClass
    public static void tearDownClass() throws Exception {
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

    // TODO add test methods here.
    // The methods must be annotated with annotation @Test. For example:
    //
    @Test
    public void test() {

        System.out.println("Executing configuration service...");

        try {

            Client client = ClientBuilder.newClient();
            WebTarget target = client.target("http://localhost:8080/rest/configure");

            String input = "{ \"AccessKey\": { \"id\": \"ID\",  \"key\": \"KEY\" }, \"Request\": { \"method\": \"configure\", \"Config\": [ { \"param\": \"?PARAM_NAMe\" },{ \"param\": \"?PARAM_NAMe\" } ] } }";

            Response response = target.request().buildPost(Entity.json(input)).invoke();

            boolean status = (response.getStatus() == 201 || response.getStatus() == 200);

            String output = "";

            if (!status) {

                System.out.println("Failed : HTTP error code : " + response.getStatus());

            } else {

                output = response.readEntity(String.class);
                System.out.println("Output from Server .... " + output);

            }

            response.close();

            assertEquals(status, true);

        } catch (Exception e) {

            e.printStackTrace();

        }

    }

}
