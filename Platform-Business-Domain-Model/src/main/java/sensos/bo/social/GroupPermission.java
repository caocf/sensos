/*
 * Copyright (c) 2009-2011 LodgON  (http://www.lodgon.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package sensos.bo.social;

import sensos.bo.social.Authorizable;
import java.io.Serializable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.PostLoad;
import javax.persistence.PostPersist;
import javax.persistence.PostUpdate;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;
import sensos.bo.user.PlatformUser;

/**
 * A group permission is a permission that is granted to a user or group to
 * allow a certain action on a specific group entity. An example can be to allow
 * a user or group to remove (action) a specific group (target group).
 *
 * @author erwin
 */
@Entity
@NamedQueries({
  @NamedQuery(
    name = "GroupPermission.findByGroupAndTargetAndAction",
    query = "SELECT cp FROM GroupPermission cp WHERE cp.group = :group AND cp.target = :target AND cp.action = :action"
  ),
  @NamedQuery(
    name = "GroupPermission.findByUserAndTargetAndAction",
    query = "SELECT cp FROM GroupPermission cp WHERE cp.user = :user AND cp.target = :target AND cp.action = :action"
  ),
  @NamedQuery(
    name = "GroupPermission.findByGroup",
    query = "SELECT cp FROM GroupPermission cp WHERE cp.group = :group"
  ),
  @NamedQuery(
    name = "GroupPermission.findByTarget",
    query = "SELECT cp FROM GroupPermission cp WHERE cp.target = :target"
  ),
  @NamedQuery(
    name = "GroupPermission.findByUser",
    query = "SELECT cp FROM GroupPermission cp WHERE cp.user = :user"
  ),
  @NamedQuery(
    name = "GroupPermission.findByGroupAndTarget",
    query = "SELECT cp FROM GroupPermission cp WHERE cp.group = :group AND cp.target = :target"
  ),
  @NamedQuery(
    name = "GroupPermission.findByUserAndTarget",
    query = "SELECT cp FROM GroupPermission cp WHERE cp.user = :user AND cp.target = :target"
  )
})
@XmlRootElement
@XmlAccessorType(XmlAccessType.NONE)
public class GroupPermission implements Serializable {
  private static final long serialVersionUID = 1L;
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;
  @ManyToOne
  private PlatformUser user;
  @ManyToOne
  private Group group;
  @ManyToOne
  private Group target;
  @Column(name = "PERMISSIONACTION")
  private int action;

  @Transient
  private Long targetId;

  @Transient
  private Authorizable authorizable;

	/**
	 * The action associated with this group permission.
	 *
	 * @return the action of the group permission
	 */
  public int getAction() {
    return action;
  }

	/**
	 * Sets the action associated with this group permission.
	 *
	 * @param action the action of the group permission
	 */
  public void setAction(int action) {
    this.action = action;
  }

	/**
	 * The group that was granted this group permission. If the permission was 
	 * instead granted to a user, then the group will be <code>null</code>.
	 *
	 * @return the group that was granted the group permission
	 */
  public Group getGroup() {
    return group;
  }

	/**
	 * Grants the group permission to the specified group.
	 *
	 * @param group the group that this group permission will be granted to
	 */
  public void setGroup(Group group) {
    this.group = group;
  }

	/**
	 * The unique identifier automatically generated by the persistence provider.
	 *
	 * @return unique identifier of the group permission
	 */
  public Long getId() {
    return id;
  }

	/**
	 * Sets the unique identifier for the group permission. Note that this method
	 * should never be called by developers as it will be automatically set by the
	 * underlying persistence provider.
	 *
	 * @param id the unique identifier
	 */
  public void setId(Long id) {
    this.id = id;
  }

	/**
	 * The user that was granted this group permission. If the permission was 
	 * instead granted to a group, then the user will be <code>null</code>.
	 *
	 * @return the user that was granted the group permission
	 */
  public PlatformUser getUser() {
    return user;
  }

	/**
	 * Grants the group permission to the specified user.
	 *
	 * @param user the user that this group permission will be granted to
	 */
  public void setUser(PlatformUser user) {
    this.user = user;
  }

	/**
	 * The group that this group permission was created for.
	 *
	 * @return the group for which the group permission is created
	 */
  public Group getTarget() {
    return target;
  }

	/**
	 * Sets the group where this group permission is created for.
	 *
	 * @param target the group on which the group permission is created
	 */
  public void setTarget(Group target) {
    this.target = target;
  }

	/**
	 * The id of the target group.
	 *
	 * @return the id the target group
	 */
  public Long getTargetId() {
    return targetId;
  }

	/**
	 * Sets the id of the target group. This method should not be called directly
	 * by developers as the field will be set automatically by taking the id of
	 * the target group field.
	 *
	 * @param targetId the id of the target group
	 */
  public void setTargetId(Long targetId) {
    this.targetId = targetId;
  }

	/**
	 * An authorizable that represents either the user or group that this
	 * group permission was granted to.
	 *
	 * @return an authorizable representing the entity this group permission was granted to
	 */
  public Authorizable getAuthorizable() {
    return authorizable;
  }

  @PostLoad
  @PostPersist
  @PostUpdate
  public void postLoad() {
    authorizable = new Authorizable();
    if (group != null) {
      authorizable.setId(group.getId());
			authorizable.setUid(group.getUid());
      authorizable.setType("group");
    }
    if (user != null) {
      authorizable.setId(user.getId());
			authorizable.setUid(user.getDescription());
      authorizable.setType("user");
    }
    if (target != null) {
      setTargetId(target.getId());
    }
  }
}