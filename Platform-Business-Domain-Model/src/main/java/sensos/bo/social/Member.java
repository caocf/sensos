/*
 * Copyright 2012 LodgON.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package sensos.bo.social;

import java.io.Serializable;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import sensos.bo.user.PlatformUser;

/**
 * A Member defines the unique relation between a PlatformUser and a Group. Only
 one Member entity exists for each PlatformUser and Group combination.
 
 Note that manually managing Member entities is not the recommended way. All
 membership related actions should be done through the corresponding methods
 in {@link com.lodgon.dali.core.ejb.GroupBean GroupBean}.
 *
 * @author joeri
 */
@Entity
@Table(name = "GROUPS_USERS")
@NamedQueries({
	@NamedQuery(
		name = "Member.findGroupsByUser",
		query = "SELECT m.group FROM Member m WHERE m.user = :user"
	),
	@NamedQuery(
		name = "Member.countUsersByGroup",
		query = "SELECT COUNT(m) FROM Member m WHERE m.group = :group"
	),
//	@NamedQuery(
//		name = "Member.findUsersByGroup",
//		query = "SELECT m.user FROM Member m WHERE m.group = :group"
//	),
	@NamedQuery(
		name = "Member.findByGroupAndUser",
		query = "SELECT m FROM Member m WHERE m.group = :group AND m.user = :user"
	),
	@NamedQuery(
		name = "Member.findByGroup",
		query = "SELECT m FROM Member m WHERE m.group = :group"
	),
	@NamedQuery(
		name = "Member.findByUser",
		query = "SELECT m FROM Member m WHERE m.user = :user"
	)
})
public class Member implements Serializable {
  private static final long serialVersionUID = 1L;
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

	@ManyToOne
	private Group group;
	@ManyToOne
	private PlatformUser user;

	/**
	 * The unique identifier automatically generated by the persistence provider.
	 *
	 * @return unique identifier of the member
	 */
	public Long getId() {
		return id;
	}

	/**
	 * Sets the unique identifier for the member. Note that this method should never
	 * be called by developers as it will be automatically set by the underlying
	 * persistence provider.
	 *
	 * @param id the unique identifier
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * The group that is part of this membership.
	 *
	 * @return the group for this membership
	 */
	public Group getGroup() {
		return group;
	}

	/**
	 * Sets the group that this membership is linked to.
	 *
	 * @param group the group for this membership
	 */
	public void setGroup(Group group) {
		this.group = group;
	}

	/**
	 * The user that is part of this membership.
	 *
	 * @return the user for this membership
	 */
	public PlatformUser getUser() {
		return user;
	}

	/**
	 * Sets the user that this membership is linked to.
	 *
	 * @param user the user for this membership
	 */
	public void setUser(PlatformUser user) {
		this.user = user;
	}
}